{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "699cf2d7-60a6-40e6-a97e-1562b13d083a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import streamlit as st\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "from joblib import load\n",
    "\n",
    "st.title(\"Anomaly Detection Predictive Model\")\n",
    "\n",
    "# Upload scored data CSV\n",
    "st.header(\"Upload Scored Data CSV\")\n",
    "uploaded_file = st.file_uploader(\"Upload your input CSV file\", type=[\"csv\"])\n",
    "\n",
    "if uploaded_file is not None:\n",
    "    # Load the scored data\n",
    "    scored_data = pd.read_csv(uploaded_file)\n",
    "\n",
    "    st.subheader(\"Data Preview\")\n",
    "    st.write(scored_data.head())\n",
    "\n",
    "    # Separate features and target\n",
    "    X = scored_data.drop(columns=['Anomaly_Label'])\n",
    "    y = scored_data['Anomaly_Label']\n",
    "\n",
    "    # Preprocess the data\n",
    "    scaler = StandardScaler()\n",
    "    X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "    # Train-test split\n",
    "    from sklearn.model_selection import train_test_split\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)\n",
    "\n",
    "    # Load the trained model\n",
    "    model = load('models/best_model.pkl')\n",
    "\n",
    "    # Predict on the test set\n",
    "    y_pred = model.predict(X_test)\n",
    "\n",
    "    # Display accuracy\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    st.subheader(f\"Model Accuracy: {accuracy:.2f}\")\n",
    "\n",
    "    # Display classification report\n",
    "    report = classification_report(y_test, y_pred, output_dict=True)\n",
    "    st.write(pd.DataFrame(report).transpose())\n",
    "\n",
    "    # Scoring the entire dataset\n",
    "    y_pred_full = model.predict(X_scaled)\n",
    "    scored_data['Predicted_Label'] = y_pred_full\n",
    "\n",
    "    st.subheader(\"Scored Data with Predictions\")\n",
    "    st.write(scored_data)\n",
    "\n",
    "    # Download the scored data with predictions\n",
    "    scored_data_csv = scored_data.to_csv(index=False)\n",
    "    st.download_button(\n",
    "        label=\"Download Scored Data as CSV\",\n",
    "        data=scored_data_csv,\n",
    "        file_name='scored_data_with_predictions.csv',\n",
    "        mime='text/csv'\n",
    "    )\n",
    "else:\n",
    "    st.info(\"Please upload a CSV file to proceed.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
